// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.jtestme.collector.domain;

import es.jtestme.collector.domain.EnvironmentDataOnDemand;
import es.jtestme.collector.domain.Server;
import es.jtestme.collector.domain.ServerDataOnDemand;
import es.jtestme.collector.domain.reference.ServerType;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ServerDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ServerDataOnDemand: @Component;
    
    private Random ServerDataOnDemand.rnd = new SecureRandom();
    
    private List<Server> ServerDataOnDemand.data;
    
    @Autowired
    EnvironmentDataOnDemand ServerDataOnDemand.environmentDataOnDemand;
    
    public Server ServerDataOnDemand.getNewTransientServer(int index) {
        Server obj = new Server();
        setHttpProxyHost(obj, index);
        setHttpProxyPort(obj, index);
        setHttpsProxyHost(obj, index);
        setHttpsProxyPort(obj, index);
        setName(obj, index);
        setPassword(obj, index);
        setProxyPassword(obj, index);
        setProxyUser(obj, index);
        setServerType(obj, index);
        setTrustStorePassword(obj, index);
        setUrl(obj, index);
        setUsername(obj, index);
        return obj;
    }
    
    public void ServerDataOnDemand.setHttpProxyHost(Server obj, int index) {
        String httpProxyHost = "httpProxyHost_" + index;
        obj.setHttpProxyHost(httpProxyHost);
    }
    
    public void ServerDataOnDemand.setHttpProxyPort(Server obj, int index) {
        String httpProxyPort = "httpProxyPort_" + index;
        obj.setHttpProxyPort(httpProxyPort);
    }
    
    public void ServerDataOnDemand.setHttpsProxyHost(Server obj, int index) {
        String httpsProxyHost = "httpsProxyHost_" + index;
        obj.setHttpsProxyHost(httpsProxyHost);
    }
    
    public void ServerDataOnDemand.setHttpsProxyPort(Server obj, int index) {
        String httpsProxyPort = "httpsProxyPort_" + index;
        obj.setHttpsProxyPort(httpsProxyPort);
    }
    
    public void ServerDataOnDemand.setName(Server obj, int index) {
        String name = "name_" + index;
        if (name.length() > 100) {
            name = name.substring(0, 100);
        }
        obj.setName(name);
    }
    
    public void ServerDataOnDemand.setPassword(Server obj, int index) {
        String password = "password_" + index;
        if (password.length() > 50) {
            password = password.substring(0, 50);
        }
        obj.setPassword(password);
    }
    
    public void ServerDataOnDemand.setProxyPassword(Server obj, int index) {
        String proxyPassword = "proxyPassword_" + index;
        obj.setProxyPassword(proxyPassword);
    }
    
    public void ServerDataOnDemand.setProxyUser(Server obj, int index) {
        String proxyUser = "proxyUser_" + index;
        obj.setProxyUser(proxyUser);
    }
    
    public void ServerDataOnDemand.setServerType(Server obj, int index) {
        ServerType serverType = ServerType.class.getEnumConstants()[0];
        obj.setServerType(serverType);
    }
    
    public void ServerDataOnDemand.setTrustStorePassword(Server obj, int index) {
        String trustStorePassword = "trustStorePassword_" + index;
        obj.setTrustStorePassword(trustStorePassword);
    }
    
    public void ServerDataOnDemand.setUrl(Server obj, int index) {
        String url = "url_" + index;
        if (url.length() > 255) {
            url = url.substring(0, 255);
        }
        obj.setUrl(url);
    }
    
    public void ServerDataOnDemand.setUsername(Server obj, int index) {
        String username = "username_" + index;
        if (username.length() > 50) {
            username = username.substring(0, 50);
        }
        obj.setUsername(username);
    }
    
    public Server ServerDataOnDemand.getSpecificServer(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Server obj = data.get(index);
        Long id = obj.getId();
        return Server.findServer(id);
    }
    
    public Server ServerDataOnDemand.getRandomServer() {
        init();
        Server obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Server.findServer(id);
    }
    
    public boolean ServerDataOnDemand.modifyServer(Server obj) {
        return false;
    }
    
    public void ServerDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Server.findServerEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Server' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Server>();
        for (int i = 0; i < 10; i++) {
            Server obj = getNewTransientServer(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
