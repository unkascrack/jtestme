// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.jtestme.collector.domain;

import es.jtestme.collector.domain.Application;
import es.jtestme.collector.domain.ApplicationDataOnDemand;
import es.jtestme.collector.domain.Environment;
import es.jtestme.collector.domain.EnvironmentDataOnDemand;
import es.jtestme.collector.domain.reference.EnvironmentType;
import es.jtestme.collector.service.JTestMeCollectorService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect EnvironmentDataOnDemand_Roo_DataOnDemand {
    
    declare @type: EnvironmentDataOnDemand: @Component;
    
    private Random EnvironmentDataOnDemand.rnd = new SecureRandom();
    
    private List<Environment> EnvironmentDataOnDemand.data;
    
    @Autowired
    ApplicationDataOnDemand EnvironmentDataOnDemand.applicationDataOnDemand;
    
    @Autowired
    JTestMeCollectorService EnvironmentDataOnDemand.jTestMeCollectorService;
    
    public Environment EnvironmentDataOnDemand.getNewTransientEnvironment(int index) {
        Environment obj = new Environment();
        setApplication(obj, index);
        setDescription(obj, index);
        setEnvironmentType(obj, index);
        setMailingError(obj, index);
        setMailingNoConnect(obj, index);
        setName(obj, index);
        setStartWatching(obj, index);
        return obj;
    }
    
    public void EnvironmentDataOnDemand.setApplication(Environment obj, int index) {
        Application application = applicationDataOnDemand.getRandomApplication();
        obj.setApplication(application);
    }
    
    public void EnvironmentDataOnDemand.setDescription(Environment obj, int index) {
        String description = "description_" + index;
        if (description.length() > 250) {
            description = description.substring(0, 250);
        }
        obj.setDescription(description);
    }
    
    public void EnvironmentDataOnDemand.setEnvironmentType(Environment obj, int index) {
        EnvironmentType environmentType = EnvironmentType.class.getEnumConstants()[0];
        obj.setEnvironmentType(environmentType);
    }
    
    public void EnvironmentDataOnDemand.setMailingError(Environment obj, int index) {
        Boolean mailingError = true;
        obj.setMailingError(mailingError);
    }
    
    public void EnvironmentDataOnDemand.setMailingNoConnect(Environment obj, int index) {
        Boolean mailingNoConnect = true;
        obj.setMailingNoConnect(mailingNoConnect);
    }
    
    public void EnvironmentDataOnDemand.setName(Environment obj, int index) {
        String name = "name_" + index;
        if (name.length() > 100) {
            name = name.substring(0, 100);
        }
        obj.setName(name);
    }
    
    public void EnvironmentDataOnDemand.setStartWatching(Environment obj, int index) {
        Boolean startWatching = true;
        obj.setStartWatching(startWatching);
    }
    
    public Environment EnvironmentDataOnDemand.getSpecificEnvironment(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Environment obj = data.get(index);
        Long id = obj.getId();
        return jTestMeCollectorService.findEnvironment(id);
    }
    
    public Environment EnvironmentDataOnDemand.getRandomEnvironment() {
        init();
        Environment obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return jTestMeCollectorService.findEnvironment(id);
    }
    
    public boolean EnvironmentDataOnDemand.modifyEnvironment(Environment obj) {
        return false;
    }
    
    public void EnvironmentDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = jTestMeCollectorService.findEnvironmentEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Environment' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Environment>();
        for (int i = 0; i < 10; i++) {
            Environment obj = getNewTransientEnvironment(i);
            try {
                jTestMeCollectorService.saveEnvironment(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
