#summary Guía del usuario.

= JTestMe: Guía del Usuario =

== Índice ==
<ol>
 <li>[#1._Introducci%C3%B3n Introducción]
 <li>[#2._Dependencias Dependencias]
 <li>[#3._Configuraci%C3%B3n_B%C3%A1sica Configuración Básica]
 <ol type=i>
  <li>[#3.1._Tipos_de_Test Tipos de Test]
  <li>[#3.2._Properties Properties]
  <li>[#3.3._Java_SE Java SE]
  <li>[#3.4._Java_EE Java EE]

 <li>[#4._Configuraci%C3%B3n_Avanzada Configuración Avanzada]
 <ol type=i>
  <li>[#4.1._Log Log]
  <li>[#4.2._JTestMeExecutor_Personalizadas JTestMeExecutor Personalizados]
  <li>[#4.3._JTestMeView_Personalizadas JTestMeView Personalizados]
  <li>[#4.4._Seguridad Seguridad]

 <li>[#5._Desarrollo Desarrollo]


==1. Introducción==
El objetivo de JTestMe es facilitar la comprobación de los servicios y/o recursos necesarios de una aplicación para su correcta ejecución, de esta forma será posible tener monitorizado en todo momento las dependencias externas de una aplicación.

JTestMe es una librería Java, que es compatible tanto con aplicaciones Java SE, como aplicaciones Java EE, disponiendo incluso de un {{{javax.servlet.Filter}}} para poder visualizar de forma sencilla el estado de los recursos de una aplicación.

== 2. Dependencias ==

JTestMe esta implementado con la versión *1.5* de Java.

Además existirá una serie de dependencias adiciones en función de los verificadores que se utilicen:
 * *smpt*, {{{javax.mail}}}
 * *openoffice*, {{{jodconverter}}}
 * *webservice rpc* {{{jaxrpc-impl}}}

Las dependencias maven de estas librerías son:
{{{
<dependency>
	<groupId>javax.mail</groupId>
	<artifactId>mail</artifactId>
	<version>1.4.6</version>
	<optional>true</optional>
</dependency>
<dependency>
	<groupId>com.artofsolving</groupId>
	<artifactId>jodconverter</artifactId>
	<version>2.2.1</version>
	<optional>true</optional>
</dependency>
<dependency>
	<groupId>com.sun.xml.rpc</groupId>
	<artifactId>jaxrpc-impl</artifactId>
	<version>1.1.3_01</version>
	<optional>true</optional>
</dependency>
}}}


== 3. Configuración Básica ==
JTestMe se puede configurar tanto de forma programática, como mediante archivo properties externo.

=== 3.1. Tipos de Test === 
Lo primero que hemos de conocer son los tipos de verificadores que dispone de manera interna JTestMe para poder utilizarlos:

 * *connection*, permite verificar conexiones HTTP y HTTPS.
 * *datasource*, permite verificar conexiones JNDI de {{{java.sql.DataSource}}}.
 * *ftp*, permite verificar conexión FTP.
 * *graphics*, permite comprobar si el sistema dispone de librerías X para imprimir reportes y otras librerías que hacen uso de este servicio.
 * *jndi*, permite verificar conexiones con recursos JNDI (EJB, Resources,...).
 * *jdbc*, permite verificar conexiones JDBC.
 * *ldap*, permite verificar conexiones LDAP.
 * *openoffice*, permite verificar conexiones con el servicio !OpenOffice o !LibreOffice.
 * *smtp*, permite verificar la conexión con el servidor SMTP.
 * *webservice*, permite verificar las conexiones con servicios web.
 * *custom*, permite implementar una solución propia para poder verificar un recurso de la aplicación. En el punto [#4.2._JTestMeExecutor_Personalizadas 4.2.] Más adelante se mostrará como implementar este tipo de verificación.

=== 3.2. Properties ===
Para cada uno de los tipos de test será necesario definir una serie de parámetros para que JTestMe ejecuta de forma correcta la verificación.

Los parámetros de configuración comunes para todos los tipos de test son:
 * *type*, indica el tipo de test que se trata, este parámetro es obligatorio.
 * *name*, representa el nombre del verificador, este parámetro es obligatorio.
 * *description*, almacena la descripción del verificador, campo opcional.
 * *resolution*, almacena el comentario de qué hacer en caso de que falle la verificación, campo opcional.
 * *optional*, indica si la verificación es opcional o no, campo booleano opcional cuyo valor por defecto es false.

Para cada tipo de test existen toda una serie de parámetros propios de configuración:
 * 


Para los parámetros es posible introducir claves de variables alojadas en las propiedades del sistema ({{{System.getProperty}}}) o recursos del classpath ({{{classpath:}}}).  Ejemplo:
{{{
....param.truststore=${pathTrustStore}/trustore
....param.truststore=${trustStorePassword}
....param.truststore=classpath:resource
}}}
 
=== 3.3. Java SE ===
=== 3.4. Java EE ===

== 4. Configuración Avanzada ==
=== 4.1. Log ===
=== 4.2. JTestMeExecutor Personalizadas ===
=== 4.3. JTestMeView Personalizadas ===
=== 4.4. Seguridad ===

== 5. Desarrollo ==