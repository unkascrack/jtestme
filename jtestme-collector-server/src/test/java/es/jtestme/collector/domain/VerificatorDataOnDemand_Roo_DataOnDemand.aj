// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.jtestme.collector.domain;

import es.jtestme.collector.domain.ServerState;
import es.jtestme.collector.domain.ServerStateDataOnDemand;
import es.jtestme.collector.domain.Verificator;
import es.jtestme.collector.domain.VerificatorDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect VerificatorDataOnDemand_Roo_DataOnDemand {
    
    declare @type: VerificatorDataOnDemand: @Component;
    
    private Random VerificatorDataOnDemand.rnd = new SecureRandom();
    
    private List<Verificator> VerificatorDataOnDemand.data;
    
    @Autowired
    ServerStateDataOnDemand VerificatorDataOnDemand.serverStateDataOnDemand;
    
    public Verificator VerificatorDataOnDemand.getNewTransientVerificator(int index) {
        Verificator obj = new Verificator();
        setCause(obj, index);
        setMessage(obj, index);
        setName(obj, index);
        setServerState(obj, index);
        setSuccess(obj, index);
        setType(obj, index);
        return obj;
    }
    
    public void VerificatorDataOnDemand.setCause(Verificator obj, int index) {
        String cause = "cause_" + index;
        obj.setCause(cause);
    }
    
    public void VerificatorDataOnDemand.setMessage(Verificator obj, int index) {
        String message = "message_" + index;
        obj.setMessage(message);
    }
    
    public void VerificatorDataOnDemand.setName(Verificator obj, int index) {
        String name = "name_" + index;
        obj.setName(name);
    }
    
    public void VerificatorDataOnDemand.setServerState(Verificator obj, int index) {
        ServerState serverState = serverStateDataOnDemand.getRandomServerState();
        obj.setServerState(serverState);
    }
    
    public void VerificatorDataOnDemand.setSuccess(Verificator obj, int index) {
        String success = "success_" + index;
        obj.setSuccess(success);
    }
    
    public void VerificatorDataOnDemand.setType(Verificator obj, int index) {
        String type = "type_" + index;
        obj.setType(type);
    }
    
    public Verificator VerificatorDataOnDemand.getSpecificVerificator(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Verificator obj = data.get(index);
        Long id = obj.getId();
        return Verificator.findVerificator(id);
    }
    
    public Verificator VerificatorDataOnDemand.getRandomVerificator() {
        init();
        Verificator obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Verificator.findVerificator(id);
    }
    
    public boolean VerificatorDataOnDemand.modifyVerificator(Verificator obj) {
        return false;
    }
    
    public void VerificatorDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Verificator.findVerificatorEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Verificator' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Verificator>();
        for (int i = 0; i < 10; i++) {
            Verificator obj = getNewTransientVerificator(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
